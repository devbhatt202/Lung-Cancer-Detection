# -*- coding: utf-8 -*-
"""Lungcancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15rxyv_4zMJPPNDab5szPm5ch8FLSA0Pe
"""

import pandas as pd
import numpy as np
import matplotlib. pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

lung_data = pd.read_csv("survey lung cancer.csv")

lung_data

lung_data.head()

lung_data.tail()

#dependent_variable
x = lung_data.iloc[:,0:-1]
print(x)

#independent_variable
y = lung_data. iloc[:,-1:]
print(y)

lung_data.GENDER = lung_data.GENDER.map({"M":1,"F":2})
lung_data.LUNG_CANCER = lung_data.LUNG_CANCER.map({"YES":1,"NO":2})

lung_data.shape

lung_data.isnull().sum()

lung_data.dtypes

lung_data.head()

lung_data.tail()

#the describe() method returns description of data in DataFrame
lung_data.describe()

#the info() method prints information of the database
lung_data.info()

#Splitting the Dataset: Training and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1/3,random_state=0)

lung_data['LUNG_CANCER'].value_counts()

len(lung_data)

len(x_test)

len(x_train)

#dependent_variable
x = lung_data.iloc[:,0:-1]
x

#independent_variable
y = lung_data.iloc[:,-1:]
y

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

from sklearn.linear_model import LogisticRegression
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1/3,random_state=0)

#Fitting simple linear regression to the training test
Model1 = LogisticRegression()
Model1.fit(x_train, y_train)
#Predicting the test set results
prediction1 = Model1.predict(x_test)

prediction1

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
confusion_matrix(y_test,prediction1)

accuracy_score(y_test,prediction1)

from sklearn.metrics import precision_score
probs = Model1.predict_proba(x_test)
precision_score(y_test, prediction1, average = None)

from sklearn.metrics import precision_score, recall_score, f1_score

# assuming your predicted and actual labels are stored in variables y_pred and y_true, respectively
accuracy = accuracy_score(y_test, prediction1)
precision = precision_score(y_test, prediction1)
recall = recall_score(y_test, prediction1)
f1 = f1_score(y_test, prediction1)

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 score:", f1)

from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

recall_score(y_test, prediction1, average = None)

f1_score(y_test, prediction1, average = None)

cm = confusion_matrix(y_true = y_test, y_pred = prediction1)
#plot_confusion_matrix(cm,level,title = "confusion_matrix")
sns.heatmap(cm, annot=True, cmap="Blues", fmt="d")
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.title("Confusion Matrix")
plt.show()

#Building a predictive system
input_data = (2,63,1,2,1,1,1,1,1,2,1,2,2,1,1)
input_data_array = np.asarray(input_data)
input_data_reshaped = input_data_array.reshape(1,-1)

prediction = Model1.predict(input_data_reshaped)
if(prediction == 1):
  print("Lung Cancer Detected")

else:
  print("Minor issues only. No Symptoms of lung cancer" )